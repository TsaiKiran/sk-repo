/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.sk;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Avro Schema for CDRKey */
@org.apache.avro.specific.AvroGenerated
public class CDRKey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3224414825333303960L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CDRKey\",\"namespace\":\"com.sk\",\"doc\":\"Avro Schema for CDRKey\",\"fields\":[{\"name\":\"fileName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"OriginalFileName\"},{\"name\":\"fileDestination\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"FileDestination Directory\"},{\"name\":\"fileID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"fileID from filename\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CDRKey> ENCODER =
      new BinaryMessageEncoder<CDRKey>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CDRKey> DECODER =
      new BinaryMessageDecoder<CDRKey>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CDRKey> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CDRKey> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CDRKey> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CDRKey>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CDRKey to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CDRKey from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CDRKey instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CDRKey fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** OriginalFileName */
   private java.lang.String fileName;
  /** FileDestination Directory */
   private java.lang.String fileDestination;
  /** fileID from filename */
   private java.lang.String fileID;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CDRKey() {}

  /**
   * All-args constructor.
   * @param fileName OriginalFileName
   * @param fileDestination FileDestination Directory
   * @param fileID fileID from filename
   */
  public CDRKey(java.lang.String fileName, java.lang.String fileDestination, java.lang.String fileID) {
    this.fileName = fileName;
    this.fileDestination = fileDestination;
    this.fileID = fileID;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return fileName;
    case 1: return fileDestination;
    case 2: return fileID;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: fileName = value$ != null ? value$.toString() : null; break;
    case 1: fileDestination = value$ != null ? value$.toString() : null; break;
    case 2: fileID = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'fileName' field.
   * @return OriginalFileName
   */
  public java.lang.String getFileName() {
    return fileName;
  }



  /**
   * Gets the value of the 'fileDestination' field.
   * @return FileDestination Directory
   */
  public java.lang.String getFileDestination() {
    return fileDestination;
  }



  /**
   * Gets the value of the 'fileID' field.
   * @return fileID from filename
   */
  public java.lang.String getFileID() {
    return fileID;
  }



  /**
   * Creates a new CDRKey RecordBuilder.
   * @return A new CDRKey RecordBuilder
   */
  public static com.sk.CDRKey.Builder newBuilder() {
    return new com.sk.CDRKey.Builder();
  }

  /**
   * Creates a new CDRKey RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CDRKey RecordBuilder
   */
  public static com.sk.CDRKey.Builder newBuilder(com.sk.CDRKey.Builder other) {
    if (other == null) {
      return new com.sk.CDRKey.Builder();
    } else {
      return new com.sk.CDRKey.Builder(other);
    }
  }

  /**
   * Creates a new CDRKey RecordBuilder by copying an existing CDRKey instance.
   * @param other The existing instance to copy.
   * @return A new CDRKey RecordBuilder
   */
  public static com.sk.CDRKey.Builder newBuilder(com.sk.CDRKey other) {
    if (other == null) {
      return new com.sk.CDRKey.Builder();
    } else {
      return new com.sk.CDRKey.Builder(other);
    }
  }

  /**
   * RecordBuilder for CDRKey instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CDRKey>
    implements org.apache.avro.data.RecordBuilder<CDRKey> {

    /** OriginalFileName */
    private java.lang.String fileName;
    /** FileDestination Directory */
    private java.lang.String fileDestination;
    /** fileID from filename */
    private java.lang.String fileID;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.sk.CDRKey.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.fileName)) {
        this.fileName = data().deepCopy(fields()[0].schema(), other.fileName);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.fileDestination)) {
        this.fileDestination = data().deepCopy(fields()[1].schema(), other.fileDestination);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.fileID)) {
        this.fileID = data().deepCopy(fields()[2].schema(), other.fileID);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing CDRKey instance
     * @param other The existing instance to copy.
     */
    private Builder(com.sk.CDRKey other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.fileName)) {
        this.fileName = data().deepCopy(fields()[0].schema(), other.fileName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fileDestination)) {
        this.fileDestination = data().deepCopy(fields()[1].schema(), other.fileDestination);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fileID)) {
        this.fileID = data().deepCopy(fields()[2].schema(), other.fileID);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'fileName' field.
      * OriginalFileName
      * @return The value.
      */
    public java.lang.String getFileName() {
      return fileName;
    }


    /**
      * Sets the value of the 'fileName' field.
      * OriginalFileName
      * @param value The value of 'fileName'.
      * @return This builder.
      */
    public com.sk.CDRKey.Builder setFileName(java.lang.String value) {
      validate(fields()[0], value);
      this.fileName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'fileName' field has been set.
      * OriginalFileName
      * @return True if the 'fileName' field has been set, false otherwise.
      */
    public boolean hasFileName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'fileName' field.
      * OriginalFileName
      * @return This builder.
      */
    public com.sk.CDRKey.Builder clearFileName() {
      fileName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fileDestination' field.
      * FileDestination Directory
      * @return The value.
      */
    public java.lang.String getFileDestination() {
      return fileDestination;
    }


    /**
      * Sets the value of the 'fileDestination' field.
      * FileDestination Directory
      * @param value The value of 'fileDestination'.
      * @return This builder.
      */
    public com.sk.CDRKey.Builder setFileDestination(java.lang.String value) {
      validate(fields()[1], value);
      this.fileDestination = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fileDestination' field has been set.
      * FileDestination Directory
      * @return True if the 'fileDestination' field has been set, false otherwise.
      */
    public boolean hasFileDestination() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fileDestination' field.
      * FileDestination Directory
      * @return This builder.
      */
    public com.sk.CDRKey.Builder clearFileDestination() {
      fileDestination = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'fileID' field.
      * fileID from filename
      * @return The value.
      */
    public java.lang.String getFileID() {
      return fileID;
    }


    /**
      * Sets the value of the 'fileID' field.
      * fileID from filename
      * @param value The value of 'fileID'.
      * @return This builder.
      */
    public com.sk.CDRKey.Builder setFileID(java.lang.String value) {
      validate(fields()[2], value);
      this.fileID = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'fileID' field has been set.
      * fileID from filename
      * @return True if the 'fileID' field has been set, false otherwise.
      */
    public boolean hasFileID() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'fileID' field.
      * fileID from filename
      * @return This builder.
      */
    public com.sk.CDRKey.Builder clearFileID() {
      fileID = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CDRKey build() {
      try {
        CDRKey record = new CDRKey();
        record.fileName = fieldSetFlags()[0] ? this.fileName : (java.lang.String) defaultValue(fields()[0]);
        record.fileDestination = fieldSetFlags()[1] ? this.fileDestination : (java.lang.String) defaultValue(fields()[1]);
        record.fileID = fieldSetFlags()[2] ? this.fileID : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CDRKey>
    WRITER$ = (org.apache.avro.io.DatumWriter<CDRKey>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CDRKey>
    READER$ = (org.apache.avro.io.DatumReader<CDRKey>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.fileName);

    out.writeString(this.fileDestination);

    out.writeString(this.fileID);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.fileName = in.readString();

      this.fileDestination = in.readString();

      this.fileID = in.readString();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.fileName = in.readString();
          break;

        case 1:
          this.fileDestination = in.readString();
          break;

        case 2:
          this.fileID = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










