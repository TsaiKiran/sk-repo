/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.sk;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Avro Schema for CDR */
@org.apache.avro.specific.AvroGenerated
public class CDR extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7451466093378102976L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CDR\",\"namespace\":\"com.sk\",\"doc\":\"Avro Schema for CDR\",\"fields\":[{\"name\":\"fileName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Original input FileName\"},{\"name\":\"CustomerName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"\"},{\"name\":\"CustAccountNum\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Customer Account number\"},{\"name\":\"DataUsage\",\"type\":\"float\",\"doc\":\"Data used for billing cycle in MB\"},{\"name\":\"PlanID\",\"type\":\"int\",\"doc\":\"Plan type of customer\"},{\"name\":\"Bill\",\"type\":[\"null\",\"long\"],\"doc\":\"bill for used data\",\"default\":null},{\"name\":\"emailStatement\",\"type\":\"boolean\",\"doc\":\"Approval for email statement,instead of postal service\",\"default\":true}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CDR> ENCODER =
      new BinaryMessageEncoder<CDR>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CDR> DECODER =
      new BinaryMessageDecoder<CDR>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CDR> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CDR> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CDR> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CDR>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CDR to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CDR from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CDR instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CDR fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Original input FileName */
   private java.lang.String fileName;
   private java.lang.String CustomerName;
  /** Customer Account number */
   private java.lang.String CustAccountNum;
  /** Data used for billing cycle in MB */
   private float DataUsage;
  /** Plan type of customer */
   private int PlanID;
  /** bill for used data */
   private java.lang.Long Bill;
  /** Approval for email statement,instead of postal service */
   private boolean emailStatement;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CDR() {}

  /**
   * All-args constructor.
   * @param fileName Original input FileName
   * @param CustomerName The new value for CustomerName
   * @param CustAccountNum Customer Account number
   * @param DataUsage Data used for billing cycle in MB
   * @param PlanID Plan type of customer
   * @param Bill bill for used data
   * @param emailStatement Approval for email statement,instead of postal service
   */
  public CDR(java.lang.String fileName, java.lang.String CustomerName, java.lang.String CustAccountNum, java.lang.Float DataUsage, java.lang.Integer PlanID, java.lang.Long Bill, java.lang.Boolean emailStatement) {
    this.fileName = fileName;
    this.CustomerName = CustomerName;
    this.CustAccountNum = CustAccountNum;
    this.DataUsage = DataUsage;
    this.PlanID = PlanID;
    this.Bill = Bill;
    this.emailStatement = emailStatement;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return fileName;
    case 1: return CustomerName;
    case 2: return CustAccountNum;
    case 3: return DataUsage;
    case 4: return PlanID;
    case 5: return Bill;
    case 6: return emailStatement;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: fileName = value$ != null ? value$.toString() : null; break;
    case 1: CustomerName = value$ != null ? value$.toString() : null; break;
    case 2: CustAccountNum = value$ != null ? value$.toString() : null; break;
    case 3: DataUsage = (java.lang.Float)value$; break;
    case 4: PlanID = (java.lang.Integer)value$; break;
    case 5: Bill = (java.lang.Long)value$; break;
    case 6: emailStatement = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'fileName' field.
   * @return Original input FileName
   */
  public java.lang.String getFileName() {
    return fileName;
  }



  /**
   * Gets the value of the 'CustomerName' field.
   * @return The value of the 'CustomerName' field.
   */
  public java.lang.String getCustomerName() {
    return CustomerName;
  }



  /**
   * Gets the value of the 'CustAccountNum' field.
   * @return Customer Account number
   */
  public java.lang.String getCustAccountNum() {
    return CustAccountNum;
  }



  /**
   * Gets the value of the 'DataUsage' field.
   * @return Data used for billing cycle in MB
   */
  public float getDataUsage() {
    return DataUsage;
  }



  /**
   * Gets the value of the 'PlanID' field.
   * @return Plan type of customer
   */
  public int getPlanID() {
    return PlanID;
  }



  /**
   * Gets the value of the 'Bill' field.
   * @return bill for used data
   */
  public java.lang.Long getBill() {
    return Bill;
  }



  /**
   * Gets the value of the 'emailStatement' field.
   * @return Approval for email statement,instead of postal service
   */
  public boolean getEmailStatement() {
    return emailStatement;
  }



  /**
   * Creates a new CDR RecordBuilder.
   * @return A new CDR RecordBuilder
   */
  public static com.sk.CDR.Builder newBuilder() {
    return new com.sk.CDR.Builder();
  }

  /**
   * Creates a new CDR RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CDR RecordBuilder
   */
  public static com.sk.CDR.Builder newBuilder(com.sk.CDR.Builder other) {
    if (other == null) {
      return new com.sk.CDR.Builder();
    } else {
      return new com.sk.CDR.Builder(other);
    }
  }

  /**
   * Creates a new CDR RecordBuilder by copying an existing CDR instance.
   * @param other The existing instance to copy.
   * @return A new CDR RecordBuilder
   */
  public static com.sk.CDR.Builder newBuilder(com.sk.CDR other) {
    if (other == null) {
      return new com.sk.CDR.Builder();
    } else {
      return new com.sk.CDR.Builder(other);
    }
  }

  /**
   * RecordBuilder for CDR instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CDR>
    implements org.apache.avro.data.RecordBuilder<CDR> {

    /** Original input FileName */
    private java.lang.String fileName;
    private java.lang.String CustomerName;
    /** Customer Account number */
    private java.lang.String CustAccountNum;
    /** Data used for billing cycle in MB */
    private float DataUsage;
    /** Plan type of customer */
    private int PlanID;
    /** bill for used data */
    private java.lang.Long Bill;
    /** Approval for email statement,instead of postal service */
    private boolean emailStatement;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.sk.CDR.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.fileName)) {
        this.fileName = data().deepCopy(fields()[0].schema(), other.fileName);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.CustomerName)) {
        this.CustomerName = data().deepCopy(fields()[1].schema(), other.CustomerName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.CustAccountNum)) {
        this.CustAccountNum = data().deepCopy(fields()[2].schema(), other.CustAccountNum);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.DataUsage)) {
        this.DataUsage = data().deepCopy(fields()[3].schema(), other.DataUsage);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.PlanID)) {
        this.PlanID = data().deepCopy(fields()[4].schema(), other.PlanID);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.Bill)) {
        this.Bill = data().deepCopy(fields()[5].schema(), other.Bill);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.emailStatement)) {
        this.emailStatement = data().deepCopy(fields()[6].schema(), other.emailStatement);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing CDR instance
     * @param other The existing instance to copy.
     */
    private Builder(com.sk.CDR other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.fileName)) {
        this.fileName = data().deepCopy(fields()[0].schema(), other.fileName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.CustomerName)) {
        this.CustomerName = data().deepCopy(fields()[1].schema(), other.CustomerName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.CustAccountNum)) {
        this.CustAccountNum = data().deepCopy(fields()[2].schema(), other.CustAccountNum);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.DataUsage)) {
        this.DataUsage = data().deepCopy(fields()[3].schema(), other.DataUsage);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.PlanID)) {
        this.PlanID = data().deepCopy(fields()[4].schema(), other.PlanID);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.Bill)) {
        this.Bill = data().deepCopy(fields()[5].schema(), other.Bill);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.emailStatement)) {
        this.emailStatement = data().deepCopy(fields()[6].schema(), other.emailStatement);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'fileName' field.
      * Original input FileName
      * @return The value.
      */
    public java.lang.String getFileName() {
      return fileName;
    }


    /**
      * Sets the value of the 'fileName' field.
      * Original input FileName
      * @param value The value of 'fileName'.
      * @return This builder.
      */
    public com.sk.CDR.Builder setFileName(java.lang.String value) {
      validate(fields()[0], value);
      this.fileName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'fileName' field has been set.
      * Original input FileName
      * @return True if the 'fileName' field has been set, false otherwise.
      */
    public boolean hasFileName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'fileName' field.
      * Original input FileName
      * @return This builder.
      */
    public com.sk.CDR.Builder clearFileName() {
      fileName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'CustomerName' field.
      * @return The value.
      */
    public java.lang.String getCustomerName() {
      return CustomerName;
    }


    /**
      * Sets the value of the 'CustomerName' field.
      * @param value The value of 'CustomerName'.
      * @return This builder.
      */
    public com.sk.CDR.Builder setCustomerName(java.lang.String value) {
      validate(fields()[1], value);
      this.CustomerName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'CustomerName' field has been set.
      * @return True if the 'CustomerName' field has been set, false otherwise.
      */
    public boolean hasCustomerName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'CustomerName' field.
      * @return This builder.
      */
    public com.sk.CDR.Builder clearCustomerName() {
      CustomerName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'CustAccountNum' field.
      * Customer Account number
      * @return The value.
      */
    public java.lang.String getCustAccountNum() {
      return CustAccountNum;
    }


    /**
      * Sets the value of the 'CustAccountNum' field.
      * Customer Account number
      * @param value The value of 'CustAccountNum'.
      * @return This builder.
      */
    public com.sk.CDR.Builder setCustAccountNum(java.lang.String value) {
      validate(fields()[2], value);
      this.CustAccountNum = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'CustAccountNum' field has been set.
      * Customer Account number
      * @return True if the 'CustAccountNum' field has been set, false otherwise.
      */
    public boolean hasCustAccountNum() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'CustAccountNum' field.
      * Customer Account number
      * @return This builder.
      */
    public com.sk.CDR.Builder clearCustAccountNum() {
      CustAccountNum = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'DataUsage' field.
      * Data used for billing cycle in MB
      * @return The value.
      */
    public float getDataUsage() {
      return DataUsage;
    }


    /**
      * Sets the value of the 'DataUsage' field.
      * Data used for billing cycle in MB
      * @param value The value of 'DataUsage'.
      * @return This builder.
      */
    public com.sk.CDR.Builder setDataUsage(float value) {
      validate(fields()[3], value);
      this.DataUsage = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'DataUsage' field has been set.
      * Data used for billing cycle in MB
      * @return True if the 'DataUsage' field has been set, false otherwise.
      */
    public boolean hasDataUsage() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'DataUsage' field.
      * Data used for billing cycle in MB
      * @return This builder.
      */
    public com.sk.CDR.Builder clearDataUsage() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'PlanID' field.
      * Plan type of customer
      * @return The value.
      */
    public int getPlanID() {
      return PlanID;
    }


    /**
      * Sets the value of the 'PlanID' field.
      * Plan type of customer
      * @param value The value of 'PlanID'.
      * @return This builder.
      */
    public com.sk.CDR.Builder setPlanID(int value) {
      validate(fields()[4], value);
      this.PlanID = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'PlanID' field has been set.
      * Plan type of customer
      * @return True if the 'PlanID' field has been set, false otherwise.
      */
    public boolean hasPlanID() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'PlanID' field.
      * Plan type of customer
      * @return This builder.
      */
    public com.sk.CDR.Builder clearPlanID() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'Bill' field.
      * bill for used data
      * @return The value.
      */
    public java.lang.Long getBill() {
      return Bill;
    }


    /**
      * Sets the value of the 'Bill' field.
      * bill for used data
      * @param value The value of 'Bill'.
      * @return This builder.
      */
    public com.sk.CDR.Builder setBill(java.lang.Long value) {
      validate(fields()[5], value);
      this.Bill = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'Bill' field has been set.
      * bill for used data
      * @return True if the 'Bill' field has been set, false otherwise.
      */
    public boolean hasBill() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'Bill' field.
      * bill for used data
      * @return This builder.
      */
    public com.sk.CDR.Builder clearBill() {
      Bill = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'emailStatement' field.
      * Approval for email statement,instead of postal service
      * @return The value.
      */
    public boolean getEmailStatement() {
      return emailStatement;
    }


    /**
      * Sets the value of the 'emailStatement' field.
      * Approval for email statement,instead of postal service
      * @param value The value of 'emailStatement'.
      * @return This builder.
      */
    public com.sk.CDR.Builder setEmailStatement(boolean value) {
      validate(fields()[6], value);
      this.emailStatement = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'emailStatement' field has been set.
      * Approval for email statement,instead of postal service
      * @return True if the 'emailStatement' field has been set, false otherwise.
      */
    public boolean hasEmailStatement() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'emailStatement' field.
      * Approval for email statement,instead of postal service
      * @return This builder.
      */
    public com.sk.CDR.Builder clearEmailStatement() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CDR build() {
      try {
        CDR record = new CDR();
        record.fileName = fieldSetFlags()[0] ? this.fileName : (java.lang.String) defaultValue(fields()[0]);
        record.CustomerName = fieldSetFlags()[1] ? this.CustomerName : (java.lang.String) defaultValue(fields()[1]);
        record.CustAccountNum = fieldSetFlags()[2] ? this.CustAccountNum : (java.lang.String) defaultValue(fields()[2]);
        record.DataUsage = fieldSetFlags()[3] ? this.DataUsage : (java.lang.Float) defaultValue(fields()[3]);
        record.PlanID = fieldSetFlags()[4] ? this.PlanID : (java.lang.Integer) defaultValue(fields()[4]);
        record.Bill = fieldSetFlags()[5] ? this.Bill : (java.lang.Long) defaultValue(fields()[5]);
        record.emailStatement = fieldSetFlags()[6] ? this.emailStatement : (java.lang.Boolean) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CDR>
    WRITER$ = (org.apache.avro.io.DatumWriter<CDR>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CDR>
    READER$ = (org.apache.avro.io.DatumReader<CDR>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.fileName);

    out.writeString(this.CustomerName);

    out.writeString(this.CustAccountNum);

    out.writeFloat(this.DataUsage);

    out.writeInt(this.PlanID);

    if (this.Bill == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.Bill);
    }

    out.writeBoolean(this.emailStatement);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.fileName = in.readString();

      this.CustomerName = in.readString();

      this.CustAccountNum = in.readString();

      this.DataUsage = in.readFloat();

      this.PlanID = in.readInt();

      if (in.readIndex() != 1) {
        in.readNull();
        this.Bill = null;
      } else {
        this.Bill = in.readLong();
      }

      this.emailStatement = in.readBoolean();

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.fileName = in.readString();
          break;

        case 1:
          this.CustomerName = in.readString();
          break;

        case 2:
          this.CustAccountNum = in.readString();
          break;

        case 3:
          this.DataUsage = in.readFloat();
          break;

        case 4:
          this.PlanID = in.readInt();
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.Bill = null;
          } else {
            this.Bill = in.readLong();
          }
          break;

        case 6:
          this.emailStatement = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










